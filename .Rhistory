guides(fill=F)+
facet_wrap(~inducer, scales = "free_x")+
theme_bw()
m.m.data <- tidyr::gather(m.data, fluorophore, value, 5:6)
ggplot(m.m.data, aes(x=log10(concentration), y=value))+
geom_point(aes(colour=strain, shape=fluorophore))+
geom_line(aes(colour=fluorophore, linetype=strain, fill=replicate), alpha=0.5)+
scale_y_continuous("log10(fluorescence)", limits = c(2,6))+
scale_x_continuous("log10(inducer concentration)")+
guides(fill=F)+
facet_wrap(~inducer, scales = "free_x")+
theme_bw()
trim.fcs(dir_path = "R:/Alex/FACS/SPoCK/SPoCK7", flu_channels = c("VL1-H", "BL1-H"), do_plot = T)
library(flowCore)
library(ggplot2)
library(reshape)
dir <- "R:/Alex/FACS/SPoCK/SPoCK7_trimmed"
files <- list.files(path = dir, pattern = utils::glob2rx("*.fcs"),
full.names = T, recursive = T, include.dirs = T)
data <- c()
for(file in files){
sample.name <- strsplit(file, "/")[[1]][6]
sample.name <- strsplit(sample.name, "[.]")[[1]][1]
splt <- unlist(strsplit(sample.name, "_"))
strain <- splt[3]
inducer <- splt[4]
if(inducer=="ara"){
concentration <- as.numeric(paste("0.",splt[5],sep=""))
} else {
concentration <- as.numeric(splt[5])
}
replicate <- splt[6]
ff <- read.FCS(file, emptyValue = F)
new.data <- data.frame(strain=strain, inducer=inducer, replicate=replicate,
concentration=concentration,
GFP=ff@exprs[,"BL1-H"],
BFP=ff@exprs[,"VL1-H"])
data <- rbind(data, new.data)
}
ggplot(data)+
geom_violin(aes(x=as.factor(concentration), y=GFP, fill=replicate), position = "dodge")+
ylim(1,6)+
facet_grid(strain~inducer, scales = "free_x")+
theme_bw()
data <- dplyr::filter(data, strain!=t0)
data <- dplyr::filter(data, strain!="t0")
data <- dplyr::filter(data, strain!="t20")
data <- dplyr::filter(data, inducer!="beads")
data <- dplyr::filter(data, inducer!="MG1655")
data <- dplyr::filter(data, inducer!="p27-AF04")
data <- dplyr::filter(data, inducer!="SPoCK7")
ggplot(data)+
geom_violin(aes(x=as.factor(concentration), y=GFP, fill=replicate), position = "dodge")+
ylim(1,6)+
facet_grid(strain~inducer, scales = "free_x")+
theme_bw()
ggplot(data)+
geom_violin(aes(x=as.factor(concentration), y=BFP, fill=replicate), position = "dodge")+
ylim(1,5)+
facet_grid(strain~inducer, scales = "free_x")+
theme_bw()
library(dplyr)
m.data <- data %>% group_by(strain, inducer, replicate, concentration) %>% summarise(m.gfp=median(GFP), m.bfp=median(BFP))
ggplot(m.data, aes(x=log10(concentration), y=m.bfp, fill=replicate, colour=strain))+
geom_point()+
geom_line(alpha=0.5)+
scale_y_continuous("log10(BFP)", limits = c(2,6))+
scale_x_continuous("log10(inducer concentration)")+
guides(fill=F)+
facet_wrap(~inducer, scales = "free_x")+
theme_bw()
ggplot(m.data, aes(x=log10(concentration), y=m.gfp, fill=replicate, colour=strain))+
geom_point()+
geom_line(alpha=0.5)+
scale_y_continuous("log10(GFP)", limits = c(2,6))+
scale_x_continuous("log10(inducer concentration)")+
guides(fill=F)+
facet_wrap(~inducer, scales = "free_x")+
theme_bw()
ggplot(m.data)+
geom_point(aes(x=log10(concentration), y=m.gfp, group=replicate), colour="green")+
geom_line(aes(x=log10(concentration), y=m.gfp, group=replicate), alpha=0.5, colour="green")+
geom_point(aes(x=log10(concentration), y=m.bfp, group=replicate), colour="blue")+
geom_line(aes(x=log10(concentration), y=m.bfp, group=replicate), alpha=0.5, colour="blue")+
scale_y_continuous("log10(fluorescence)", limits = c(2,6))+
scale_x_continuous("log10(inducer concentration)")+
guides(fill=F)+
facet_grid(strain~inducer, scales = "free_x")+
theme_bw()
ggplot(m.data)+
geom_line(aes(x=log10(concentration), y=m.gfp, group=paste(strain,replicate)), colour="green", alpha=0.2)+
geom_point(aes(x=log10(concentration), y=m.gfp, fill=replicate, colour=strain), shape=7)+
geom_line(aes(x=log10(concentration), y=m.bfp, group=paste(strain,replicate)), colour="blue", alpha=0.2)+
geom_point(aes(x=log10(concentration), y=m.bfp, fill=replicate, colour=strain), shape=8)+
scale_y_continuous("log10(fluorescence)", limits = c(2,6))+
scale_x_continuous("log10(inducer concentration)")+
guides(fill=F)+
facet_wrap(~inducer, scales = "free_x")+
theme_bw()
m.m.data <- tidyr::gather(m.data, fluorophore, value, 5:6)
ggplot(m.m.data, aes(x=log10(concentration), y=value))+
geom_point(aes(colour=strain, shape=fluorophore))+
geom_line(aes(colour=fluorophore, linetype=strain, fill=replicate), alpha=0.5)+
scale_y_continuous("log10(fluorescence)", limits = c(2,6))+
scale_x_continuous("log10(inducer concentration)")+
guides(fill=F)+
facet_wrap(~inducer, scales = "free_x")+
theme_bw()
ggplot(data)+
geom_violin(aes(x=as.factor(concentration), y=BFP, fill=replicate), position = "dodge")+
ylim(1,5)+
facet_grid(strain~inducer, scales = "free_x")+
theme_bw()
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04")) +
geom_point(aes(concentration, GFP), colour="green")
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04")) +
geom_point(aes(concentration, .gfp), colour="green")
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04")) +
geom_point(aes(concentration, m.gfp), colour="green")
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04")) +
geom_point(aes(log10(concentration), m.gfp), colour="green")
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04")) +
geom_point(aes(log10(concentration), m.gfp), colour="green")
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04")) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
facet_wrap(~inducer, scales = "free_x")
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04")) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
facet_wrap(~inducer, scales = "free_x")
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04", group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
facet_wrap(~inducer, scales = "free_x")
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
facet_wrap(~inducer, scales = "free_x")
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
facet_wrap(~inducer, scales = "free_x")
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
facet_wrap(~inducer, scales = "free_x") +
theme_bw()
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
facet_wrap(~inducer, scales = "free_x") +
scale_y_continuous("log10(GFP)", limits = c(1, 6))
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
facet_wrap(~inducer, scales = "free_x") +
scale_y_continuous("log10(GFP)", limits = c(1, 6))+
theme_bw()
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
facet_wrap(~inducer, scales = "free_x") +
scale_y_continuous("log10(GFP)", limits = c(2, 5))+
theme_bw()
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
facet_wrap(~inducer, scales = "free_x") +
scale_y_continuous("log10(GFP)", limits = c(2, 6))+
theme_bw()
ggplot(data=dplyr::filter(m.data, strain=="p27-AF04"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
facet_wrap(~inducer, scales = "free_x") +
scale_y_continuous("log10(GFP)", limits = c(2, 6)) +
ggtitle("p27-AF04") +
theme_bw()
ggplot(data=dplyr::filter(m.data, strain=="SPoCK7"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
facet_wrap(~inducer, scales = "free_x") +
scale_y_continuous("log10(GFP)", limits = c(2, 6)) +
ggtitle("p27-AF04") +
theme_bw()
ggplot(data=dplyr::filter(m.data, strain=="SPoCK7"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
facet_wrap(~inducer, scales = "free_x") +
scale_y_continuous("log10(GFP)", limits = c(2, 6)) +
ggtitle("SPoCK7") +
theme_bw()
ggplot(data=dplyr::filter(dplyr::filter(m.data, strain=="p27-AF04"), inducer=="AHL"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
scale_y_continuous("log10(GFP)", limits = c(2, 6)) +
ggtitle("p27-AF04") +
theme_bw()
ggplot(data=dplyr::filter(dplyr::filter(m.data, strain=="p27-AF04"), inducer=="AHL"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
scale_y_continuous("log10(GFP)", limits = c(2, 6)) +
ggtitle("p27-AF04") +
theme_bw()
ggplot(data=dplyr::filter(dplyr::filter(m.data, strain=="p27-AF04"), inducer=="AHL"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
scale_y_continuous("log10(GFP)", limits = c(2, 6)) +
scale_x_continuous("log10([AHL]) nM", limits = c(2, 6)) +
theme_bw()
ggplot(data=dplyr::filter(dplyr::filter(m.data, strain=="p27-AF04"), inducer=="AHL"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
scale_y_continuous("log10(GFP)", limits = c(2, 6)) +
scale_x_continuous("log10([AHL]) nM") +
theme_bw()
setwd("R:/Alex/FACS/SPoCK/SPoCK7_trimmed")
ggsave("p27-AF04_AHL.pdf", width = 50, height = 50, units = "mm")
ggplot(data=dplyr::filter(dplyr::filter(m.data, strain=="p27-AF04"), inducer=="ara"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
scale_y_continuous("log10(GFP)", limits = c(2, 6)) +
scale_x_continuous("log10([ara]) nM") +
theme_bw()
ggplot(data=dplyr::filter(dplyr::filter(m.data, strain=="p27-AF04"), inducer=="ara"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
scale_y_continuous("log10(GFP)", limits = c(2, 6)) +
scale_x_continuous("log10([ara]) nM") +
theme_bw()
ggplot(data=dplyr::filter(dplyr::filter(m.data, strain=="p27-AF04"), inducer=="ara"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
scale_y_continuous("log10(fluorescence)", limits = c(2, 6)) +
scale_x_continuous("log10([ara]) nM") +
theme_bw()
ggplot(data=dplyr::filter(dplyr::filter(m.data, strain=="p27-AF04"), inducer=="ara"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
scale_y_continuous("log10(fluorescence)", limits = c(2, 6)) +
scale_x_continuous("log10([ara]) nM") +
theme_bw()
ggsave("p27-AF04_ara.pdf", width = 50, height = 50, units = "mm")
ggplot(data=dplyr::filter(dplyr::filter(m.data, strain=="p27-AF04"), inducer=="AHL"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
scale_y_continuous("log10(fluorescence)", limits = c(2, 6)) +
scale_x_continuous("log10([AHL]) nM") +
theme_bw()
ggsave("p27-AF04_AHL.pdf", width = 50, height = 50, units = "mm")
ggplot(data=dplyr::filter(dplyr::filter(m.data, strain=="SPoCK7"), inducer=="AHL"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
scale_y_continuous("log10(fluorescence)", limits = c(2, 6)) +
scale_x_continuous("log10([AHL]) nM") +
theme_bw()
ggsave("SPoCK7_AHL.pdf", width = 50, height = 50, units = "mm")
ggplot(data=dplyr::filter(dplyr::filter(m.data, strain=="SPoCK7"), inducer=="ara"), aes(group=replicate)) +
geom_point(aes(log10(concentration), m.gfp), colour="green") +
geom_line(aes(log10(concentration), m.gfp), colour="green") +
geom_point(aes(log10(concentration), m.bfp), colour="blue") +
geom_line(aes(log10(concentration), m.bfp), colour="blue") +
scale_y_continuous("log10(fluorescence)", limits = c(2, 6)) +
scale_x_continuous("log10([ara]) nM") +
theme_bw()
ggsave("SPoCK7_ara.pdf", width = 50, height = 50, units = "mm")
library(autoGate)
next_fcs <- "R:/Alex/FACS/SPoCK/SPoCK_PBS_080218/SPoCK7_PBS_080218_SPoCK7_PBS_080218_MG1655-Red_0_625_1.fcs"
flow_frame <- flowCore::read.FCS(next_fcs, emptyValue = F)
prep.flowFrame <- function(flow_frame, flus) {
# Remove channels that aren't being kept
min_flow_frame <- flow_frame[,c("FSC-H", "SSC-H", "SSC-A", flus)]
# log10 transform the values
log10_flow_frame <-
flowCore::transform(min_flow_frame,
flowCore::transformList(from = flowCore::colnames(min_flow_frame), tfun = log10))
# Remove -Inf values produced when log10 is applied
trimmed_flow_frame <- log10_flow_frame
for (marker in c("FSC-H", "SSC-H", "SSC-A", flus)) {
trimmed_flow_frame <-
flowCore::Subset(trimmed_flow_frame,
is.finite(flowCore::exprs(trimmed_flow_frame[, marker]))[,1])
}
return(trimmed_flow_frame)
}
## Trim 0 values and log10 transform
prepped_flow_frame <- prep.flowFrame(flow_frame, flu_channels)
flu_channels=c("BL1-H")
## Trim 0 values and log10 transform
prepped_flow_frame <- prep.flowFrame(flow_frame, flu_channels)
t <- ffflow_frame
tff <- flow_frame
flow_frame <- prepped_flow_frame
all_clusters <- flowClust::flowClust(flow_frame,
varNames = c("FSC-H", "SSC-H"),
K = 1:2,
criterion = "ICL",
level = 0.90);
## get the results for the K with the best ICL
best.clusters <- all_clusters[[all_clusters@index]]
debris.indx <- which(flowClust::rbox(best.clusters@mu[, 2], best.clusters@lambda)
== min(flowClust::rbox(best.clusters@mu[, 2], best.clusters@lambda)))
get.bacteria <- function(flow_frame) {
## calculate clusters for K=1, K=2 and K=3
## 1-3 is pretty arbitrary - could this be changed
all_clusters <- flowClust::flowClust(flow_frame,
varNames = c("FSC-H", "SSC-H"),
K = 1:2,
criterion = "ICL",
level = 0.90);
## get the results for the K with the best ICL
best.clusters <- all_clusters[[all_clusters@index]]
print(paste(best.clusters@K, "clusters found"))
## this is a horrible hack
## For the flow settings I've been using the bacterial clusters seem to be
## close to SSC-H == 4 so we find the cluster which is closest.
## clst.indx is the index of the cluster which has its centre closest to
## ssc-h = 4
##    the "box(4, all_clusters@lambda)" is because a Box-Cox transformation
##    needs to be applied to get the value of 4 in the clustering space.
# clst.indx <- which(abs(best.clusters@mu[, 2] - flowClust::box(4, best.clusters@lambda))
#                    == min(abs(best.clusters@mu[, 2] - flowClust::box(4, best.clusters@lambda))))
# bact_flow_frame <- flowClust::split(flow_frame, best.clusters)[[clst.indx]]
if (best.clusters@K == 1) {
clst.fsc <- flowClust::rbox(best.clusters@mu[1, 1], best.clusters@lambda)
clst.ssc <- flowClust::rbox(best.clusters@mu[1, 2], best.clusters@lambda)
if ((clst.fsc < 4) && (clst.ssc < 3)) {
print("only debris found")
bact_flow_frame <- new("flowFrame")
} else {
bact_flow_frame <- flow_frame[best.clusters,]
}
} else {
debris.indx <- which(flowClust::rbox(best.clusters@mu[, 2], best.clusters@lambda)
== min(flowClust::rbox(best.clusters@mu[, 2], best.clusters@lambda)))
Ks <- seq(1:best.clusters@K)
non.debris.clusts <- setdiff(Ks, debris.indx)
split_flow_frame <- flowClust::split(flow_frame, best.clusters,
population = list(debris = debris.indx,
non.debris = non.debris.clusts))
bact_flow_frame <- split_flow_frame$non.debris
}
return(bact_flow_frame)
}
flow_frame <- tff
## Try to remove background debris by clustering
bacteria_flow_frame <- get.bacteria(prepped_flow_frame)
get.singlets <- function(flow_frame){
# ## method using function from openCYto package
# sg <- flowStats::singletGate(flow_frame, area = "SSC-A", height = "SSC-H",
#                              prediction_level = 0.9)
# fres <- flowCore::filter(flow_frame, sg)
# singlet_flow_frame <- flowCore::Subset(flow_frame, fres)
# ## fit a line to SSC-H and SSC-A
# lm_fit <- stats::lm(flow_frame[, "SSC-H"]@exprs ~ flow_frame[, "SSC-A"]@exprs)
#
# ## trim points that fall "too far" from the line
# ##      This is an attempt to remove doublets and other cell clumps.
# ##      #####CHANGEME: HARDCODED VALUE #####
# singlet_flow_frame <- flowCore::Subset(flow_frame,
#                                        lm_fit$residuals ^ 2 < 0.01)
## method assuming singlets are on line SSC-A = SSC-H
singlet_flow_frame <- flowCore::Subset(flow_frame,
((flow_frame[, "SSC-H"]@exprs - flow_frame[, "SSC-A"]@exprs)[,1])^2 < 0.01)
return(singlet_flow_frame)
}
## Try to remove doublets
singlet_flow_frame <- get.singlets(bacteria_flow_frame)
ggplot2::ggplot() +
ggplot2::geom_point(data = dplyr::sample_n(as.data.frame(flow_frame[, c("FSC-H", "SSC-H")]@exprs), size = min(2000, flowCore::nrow(flow_frame))),
ggplot2::aes(x = log10(`FSC-H`), y = log10(`SSC-H`), color = "all_data"),
alpha = 0.1) +
ggplot2::geom_point(data = dplyr::sample_n(as.data.frame(bacteria_flow_frame[, c("FSC-H", "SSC-H")]@exprs), size = min(2000, flowCore::nrow(bacteria_flow_frame))),
ggplot2::aes(x = `FSC-H`, y = `SSC-H`, color = "bacteria"),
alpha = 0.1) +
ggplot2::geom_point(data = dplyr::sample_n(as.data.frame(singlet_flow_frame[, c("FSC-H", "SSC-H")]@exprs), size = min(2000, flowCore::nrow(singlet_flow_frame))),
ggplot2::aes(x = `FSC-H`, y = `SSC-H`, color = "single_bacteria"),
alpha = 0.1) +
ggplot2::xlab("log10(FSC-H)") +
ggplot2::ylab("log10(SSC-H)") +
ggplot2::xlim(1, 6) +
ggplot2::ylim(1, 6) + apatheme
apatheme = ggplot2::theme_bw() +
ggplot2::theme(strip.text.x = ggplot2::element_text(size = 8),
strip.background = ggplot2::element_rect(colour = "white"),
axis.text = ggplot2::element_text(size = 8),
axis.text.x = ggplot2::element_text(angle = -40, vjust = 0.5),
axis.title = ggplot2::element_text(size = 8),
# text = ggplot2::element_text(family = 'Arial'),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.border = ggplot2::element_blank(),
axis.line = ggplot2::element_line(),
legend.title = ggplot2::element_blank())
##  This function allows us to take a legend from a plot
get_legend <- function(myggplot){
tmp <- ggplot2::ggplot_gtable(ggplot2::ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
ggplot2::ggplot() +
ggplot2::geom_point(data = dplyr::sample_n(as.data.frame(flow_frame[, c("FSC-H", "SSC-H")]@exprs), size = min(2000, flowCore::nrow(flow_frame))),
ggplot2::aes(x = log10(`FSC-H`), y = log10(`SSC-H`), color = "all_data"),
alpha = 0.1) +
ggplot2::geom_point(data = dplyr::sample_n(as.data.frame(bacteria_flow_frame[, c("FSC-H", "SSC-H")]@exprs), size = min(2000, flowCore::nrow(bacteria_flow_frame))),
ggplot2::aes(x = `FSC-H`, y = `SSC-H`, color = "bacteria"),
alpha = 0.1) +
ggplot2::geom_point(data = dplyr::sample_n(as.data.frame(singlet_flow_frame[, c("FSC-H", "SSC-H")]@exprs), size = min(2000, flowCore::nrow(singlet_flow_frame))),
ggplot2::aes(x = `FSC-H`, y = `SSC-H`, color = "single_bacteria"),
alpha = 0.1) +
ggplot2::xlab("log10(FSC-H)") +
ggplot2::ylab("log10(SSC-H)") +
ggplot2::xlim(1, 6) +
ggplot2::ylim(1, 6) + apatheme
next_fcs
next_fcs <- "R:/Alex/FACS/SPoCK/SPoCK_PBS_080218/SPoCK7_PBS_080218_SPoCK7_PBS_080218_MG1655-Red_0_625_2.fcs"
flow_frame <- flowCore::read.FCS(next_fcs, emptyValue = F)
## Trim 0 values and log10 transform
prepped_flow_frame <- prep.flowFrame(flow_frame, flu_channels)
tff <- flow_frame
flow_frame <- prepped_flow_frame
all_clusters <- flowClust::flowClust(flow_frame,
varNames = c("FSC-H", "SSC-H"),
K = 1:2,
criterion = "ICL",
level = 0.90);
## get the results for the K with the best ICL
best.clusters <- all_clusters[[all_clusters@index]]
print(paste(best.clusters@K, "clusters found"))
clst.fsc <- flowClust::rbox(best.clusters@mu[1, 1], best.clusters@lambda)
clst.ssc <- flowClust::rbox(best.clusters@mu[1, 2], best.clusters@lambda)
all_clusters@index
flowClust::rbox(best.clusters@mu[1, 1], best.clusters@lambda)
flowClust::rbox(all_clusters[[2]]@mu[1, 1], all_clusters[[2]]@lambda)
flowClust::rbox(all_clusters[[2]]@mu[2, 1], all_clusters[[2]]@lambda)
flowClust::rbox(best.clusters@mu[1, 2], best.clusters@lambda)
flowClust::rbox(all_clusters[[2]]@mu[1, 2], all_clusters[[2]]@lambda)
flowClust::rbox(all_clusters[[2]]@mu[2, 2], all_clusters[[2]]@lambda)
flowClust::plot(best.clusters, flow_frame)
flowClust::plot(x=best.clusters, data=flow_frame)
flowClust::rbox(best.clusters@mu[1, 1], best.clusters@lambda)
flowClust::rbox(best.clusters@mu, best.clusters@lambda)
flowClust::rbox(all_clusters[[2]]@mu, all_clusters[[2]]@lambda)
flowClust::getEstimates(best.clusters, flow_frame)
flowClust::getEstimates(best.clusters, flow_frame)$locationsC
flowClust::getEstimates(best.clusters, flow_frame)$locationsC[[1]]
flowClust::getEstimates(all_clusters[[2]], flow_frame)$locationsC
flowClust::getEstimates(all_clusters[[2]], flow_frame)$locationsC[[,2]]
flowClust::getEstimates(all_clusters[[2]], flow_frame)$locationsC[,2]
if (best.clusters@K == 1) {
clst.fsc <- flowClust::getEstimates(best.clusters, flow_frame)$locationsC[[1]]
clst.ssc <- flowClust::getEstimates(best.clusters, flow_frame)$locationsC[[2]]
if ((clst.fsc < 4) && (clst.ssc < 3)) {
print("only debris found")
bact_flow_frame <- new("flowFrame")
} else {
bact_flow_frame <- flow_frame[best.clusters,]
}
} else {
debris.indx <- which(flowClust::getEstimates(all_clusters[[2]], flow_frame)$locationsC[,2]
== min(flowClust::getEstimates(all_clusters[[2]], flow_frame)$locationsC[,2]))
Ks <- seq(1:best.clusters@K)
non.debris.clusts <- setdiff(Ks, debris.indx)
split_flow_frame <- flowClust::split(flow_frame, best.clusters,
population = list(debris = debris.indx,
non.debris = non.debris.clusts))
bact_flow_frame <- split_flow_frame$non.debris
}
library(autoGate)
trim.fcs("R:/Alex/FACS/SPoCK/SPoCK_PBS_080218", flu_channels = c("VL1-H", "BL1-H", "YL2-H"), do_plot = T, pattern = "*625*.fcs")
flowClust::getEstimates(all_clusters[[2]], flow_frame)
bact.indx <- which(flowClust::getEstimates(all_clusters[[2]], flow_frame)$locationsC[,2]
== max(flowClust::getEstimates(all_clusters[[2]], flow_frame)$locationsC[,2]))
clst.fsc <- flowClust::getEstimates(all_clusters[[2]], flow_frame)$locationsC[[bact.indx, 1]]
clst.ssc <- flowClust::getEstimates(all_clusters[[2]], flow_frame)$locationsC[[bact.indx, 2]]
library(autoGate)
trim.fcs("R:/Alex/FACS/SPoCK/SPoCK_PBS_080218", flu_channels = c("VL1-H", "BL1-H", "YL2-H"), do_plot = T, pattern = "*625*.fcs")
library(autoGate)
trim.fcs("R:/Alex/FACS/SPoCK/SPoCK_PBS_080218", flu_channels = c("VL1-H", "BL1-H", "YL2-H"), do_plot = T, pattern = "*625*.fcs")
trim.fcs("R:/Alex/FACS/SPoCK/SPoCK_PBS_080218", flu_channels = c("VL1-H", "BL1-H", "YL2-H"), do_plot = T, pattern = "*125*.fcs")
library(autoGate)
trim.fcs("R:/Alex/FACS/SPoCK/SPoCK_PBS_080218", flu_channels = c("VL1-H", "BL1-H", "YL2-H"), do_plot = T, pattern = "*125*.fcs")
library(autoGate)
trim.fcs("C:/Users/Sandy/Dropbox/PhD/Data/SPoCK7_v2", flu_channels = c("VL1-H", "BL1-H", "YL2-H"), do_plot = T)
trim.fcs("C:/Users/Sandy/Dropbox/PhD/Data/SPoCK7_v2", flu_channels = c("VL1-H", "BL1-H"), do_plot = T)
setwd("~/GitHub/autoGate")
