ggplot() +
geom_boxplot(data=strain.data, aes(x=factor(passage*10.8), y=max_clust_prop)) +
geom_line(aes(x=factor(xvals), y=mq, group=1), colour="red",linetype = 1) +
scale_x_discrete(labels = xvals)
ggplot() +
geom_boxplot(data=strain.data, aes(x=factor(passage*10.8), y=max_clust_prop)) +
geom_line(aes(x=factor(xvals), y=mq, group=1), colour="red",linetype = 1) +
scale_x_discrete(labels = ordered(xvals))
make.posterior.trajectory <- function(data,post){
n.xvals <- 14
ns <- nrow(post)
#     xvals <- seq(from=min(data$passage), to=max(data$passage), length.out=n.xvals )
xvals <- seq(from=min(data$tm), to=max(data$tm), length.out=n.xvals )
traj <- matrix(nrow=ns, ncol=n.xvals)
for(i in 1:ns){
if(length(post)==3){
traj[i,] <- model2( as.numeric(post[i,]), xvals)
} else if(length(post)==4){
traj[i,] <- model3( as.numeric(post[i,]), xvals)
}
}
# get 95% CR
mq <- apply(traj,MARGIN=2,function(x){  quantile(x, p=c(0.5), na.rm=T) } )
lq <- apply(traj,MARGIN=2,function(x){  quantile(x, p=c(0.025), na.rm=T ) } )
uq <- apply(traj,MARGIN=2,function(x){  quantile(x, p=c(0.975), na.rm=T ) } )
return( list(xvals, mq, lq, uq) )
}
res <- make.posterior.trajectory( strain.data.summary, strain.post )
xvals <- res[[1]]
mq <- res[[2]]
lq <- res[[3]]
uq <- res[[4]]
ggplot() +
geom_boxplot(data=strain.data, aes(x=factor(passage*10.8), y=max_clust_prop)) +
geom_line(aes(x=factor(xvals), y=mq, group=1), colour="red",linetype = 1) +
scale_x_discrete(labels = ordered(xvals))
ggplot() +
geom_boxplot(data=strain.data, aes(x=factor(passage*10.8), y=max_clust_prop)) +
geom_line(aes(x=factor(xvals), y=mq, group=1), colour="red",linetype = 1) +
scale_x_discrete(labels = ordered(xvals)) +
geom_line(aes(x=xvals, y=lq), colour="red",linetype = 2) +
geom_line(aes(x=xvals, y=uq), colour="red",linetype = 2) +
expand_limits(y=0) +
xlab("passage") + ylab("fraction plasmid-bearing")
ggplot() +
geom_boxplot(data=strain.data, aes(x=factor(passage*10.8), y=max_clust_prop)) +
geom_line(aes(x=factor(xvals), y=mq, group=1), colour="red",linetype = 1) +
scale_x_discrete(labels = ordered(xvals)) +
geom_line(aes(x=factor(xvals), y=lq, group=1), colour="red",linetype = 2) +
geom_line(aes(x=factor(xvals), y=uq, group=1), colour="red",linetype = 2) +
expand_limits(y=0) +
xlab("passage") + ylab("fraction plasmid-bearing")
ggplot() +
geom_boxplot(data=strain.data, aes(x=factor(passage), y=max_clust_prop)) +
geom_line(aes(x=factor(xvals/10.8), y=mq, group=1), colour="red",linetype = 1) +
geom_line(aes(x=factor(xvals/10.8), y=lq, group=1), colour="red",linetype = 2) +
geom_line(aes(x=factor(xvals/10.8), y=uq, group=1), colour="red",linetype = 2) +
expand_limits(y=0) +
xlab("passage") + ylab("fraction plasmid-bearing")
ggplot() +
geom_boxplot(data=strain.data, aes(x=factor(passage), y=max_clust_prop)) +
geom_point(data=strain.data, aes(x=factor(passage), y=max_clust_prop)) +
geom_line(aes(x=factor(xvals/10.8), y=mq, group=1), colour="red",linetype = 1) +
geom_line(aes(x=factor(xvals/10.8), y=lq, group=1), colour="red",linetype = 2) +
geom_line(aes(x=factor(xvals/10.8), y=uq, group=1), colour="red",linetype = 2) +
expand_limits(y=0) +
xlab("passage") + ylab("fraction plasmid-bearing")
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
library(reshape2)
get.summary <- function(clusters){
# calculate number of plasmid-bearing cells
clusters$Xp <- round(clusters$num_samples * clusters$max_clust_prop)
# calculate total number plasmid-bearing cells at each passage
total.Xp <- tapply(clusters$Xp, list(clusters$passage), sum)
total.Xp <- melt(total.Xp)
names(total.Xp) <- c("passage", "total.Xp")
# calculate total number of cells at each passage
total.N <- tapply(clusters$num_samples, list(clusters$passage), sum)
total.N <- melt(total.N)
names(total.N) <- c("passage", "total.N")
d <- merge(total.Xp, total.N)
### TODO: THIS NEEDS COMPUTING PROPERLY ###
d$tm <- d$passage * 10.8
return(d)
}
patterns <- c("OXB20", "AT", "EZ", "HS")
# patterns <- c("OXB20")
n.iterations <- 100
all.posteriors <- c()
all.clust_summary <- c()
all.clust_data <- c()
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/mcmcFit.R", chdir = T)
pri <- c()
for(pattern in patterns){
cluster_data <- read.csv(paste("D:/UCL Data/FACS_data/nissle_pUC_24_LB_PBS_trimmed/", pattern, "_clusters.csv", sep=""))
cluster_data$strain <- pattern
all.clust_data <- rbind(all.clust_data, cluster_data)
if(pattern == "OXB20"){
cluster_data <- subset(cluster_data, cluster_data[, "rept"] != 4)
}
else if(pattern == "EZ"){
cluster_data <- subset(cluster_data, cluster_data[, "rept"] != 3)
}
clust_summary <- get.summary(cluster_data)
clust_summary$strain <- pattern
all.clust_summary <- rbind(all.clust_summary, clust_summary)
if(pattern == "OXB20"){
posteriors <- run.mcmc(clust_summary, c("lambda", "gamma"), n.iterations)
posteriors <- as.data.frame(posteriors)
posteriors$V3 <- 0
oxb_lam_mean <- mean(posteriors$V1)
oxb_lam_sd <- sd(posteriors$V1)
oxb_gam_mean <- mean(posteriors$V2)
oxb_gam_sd <- sd(posteriors$V2)
pri <- matrix(nrow=2,ncol=2, data=c(oxb_lam_mean, oxb_lam_sd, oxb_gam_mean, oxb_gam_sd), byrow=T)
}
else {
posteriors <- run.mcmc(clust_summary, c("lambda", "gamma", "omega"), n.iterations, use_prior=T, pri)
posteriors <- as.data.frame(posteriors)
}
posteriors$strain <- pattern
all.posteriors <- rbind(all.posteriors, posteriors)
}
names(all.posteriors) <- c("lambda", "gamma", "omega", "strain")
library(reshape2)
get.summary <- function(clusters){
# calculate number of plasmid-bearing cells
clusters$Xp <- round(clusters$num_samples * clusters$max_clust_prop)
# calculate total number plasmid-bearing cells at each passage
total.Xp <- tapply(clusters$Xp, list(clusters$passage), sum)
total.Xp <- melt(total.Xp)
names(total.Xp) <- c("passage", "total.Xp")
# calculate total number of cells at each passage
total.N <- tapply(clusters$num_samples, list(clusters$passage), sum)
total.N <- melt(total.N)
names(total.N) <- c("passage", "total.N")
d <- merge(total.Xp, total.N)
### TODO: THIS NEEDS COMPUTING PROPERLY ###
d$tm <- d$passage * 10.8
return(d)
}
patterns <- c("OXB20", "AT", "EZ", "HS")
# patterns <- c("OXB20")
n.iterations <- 100000
all.posteriors <- c()
all.clust_summary <- c()
all.clust_data <- c()
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/mcmcFit.R", chdir = T)
pri <- c()
for(pattern in patterns){
cluster_data <- read.csv(paste("D:/UCL Data/FACS_data/nissle_pUC_24_LB_PBS_trimmed/", pattern, "_clusters.csv", sep=""))
cluster_data$strain <- pattern
all.clust_data <- rbind(all.clust_data, cluster_data)
if(pattern == "OXB20"){
cluster_data <- subset(cluster_data, cluster_data[, "rept"] != 4)
}
else if(pattern == "EZ"){
cluster_data <- subset(cluster_data, cluster_data[, "rept"] != 3)
}
clust_summary <- get.summary(cluster_data)
clust_summary$strain <- pattern
all.clust_summary <- rbind(all.clust_summary, clust_summary)
if(pattern == "OXB20"){
posteriors <- run.mcmc(clust_summary, c("lambda", "gamma"), n.iterations)
posteriors <- as.data.frame(posteriors)
posteriors$V3 <- 0
oxb_lam_mean <- mean(posteriors$V1)
oxb_lam_sd <- sd(posteriors$V1)
oxb_gam_mean <- mean(posteriors$V2)
oxb_gam_sd <- sd(posteriors$V2)
pri <- matrix(nrow=2,ncol=2, data=c(oxb_lam_mean, oxb_lam_sd, oxb_gam_mean, oxb_gam_sd), byrow=T)
}
else {
posteriors <- run.mcmc(clust_summary, c("lambda", "gamma", "omega"), n.iterations, use_prior=T, pri)
posteriors <- as.data.frame(posteriors)
}
posteriors$strain <- pattern
all.posteriors <- rbind(all.posteriors, posteriors)
}
names(all.posteriors) <- c("lambda", "gamma", "omega", "strain")
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotSummaries.R")
plot.summary(all.posteriors)
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
# plot Markov chains, model fit, posteriors and correlograms
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotFull.R")
plot.all(all.clust_data, all.clust_summary, all.posteriors, n.iterations)
source("C:/Users/sandy/Documents/GitHub/UCL_Complex/PhD_1/model_fit/plotSummaries.R")
plot.summary(all.posteriors)
library(autoGate)
trim.fcs(dir_path = "R:/Alex/FACS/automated_TA", do_plot = T)
trim.fcs(dir_path = "R:/Alex/FACS/automated_TA", do_plot = T)
library(autoGate)
trim.fcs(dir_path = "R:/Alex/FACS/automated_TA", do_plot = T)
trim.fcs(dir_path = "R:/Alex/FACS/automated_TA - Copy", do_plot = T)
library(autoGate)
trim.fcs(dir_path = "R:/Alex/FACS/automated_TA - Copy", do_plot = T)
library(flowClust)
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
v <- c(2, 4, 6)
v[-4]
v[-2]
v <- c(2, 4, 6)
v[v != 4]
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
flow_frame <- read.FCS("R:/Alex/FACS/automated_TA/t02_trimmed/t02_1_AT_K_4.fcs")
flowClust.res <- flowClust::flowClust(flow_frame,
varNames=c("FSC-H", "SSC-H"),
K=1:3,
criterion="ICL",
level = 0.95);
flowClust.res <- flowClust.res[[flowClust.res@index]]
if(flowClust.res@K == 3){
clsts.ssch <- flowClust.res@mu[, 2]
clsts.ssch <- clsts.ssch[clsts.ssch != which.max(clsts.ssch)]
clsts.ssch <- clsts.ssch[clsts.ssch != which.min(clsts.ssch)]
bact_flow_frame <- flowClust::split(flow_frame, flowClust.res)[[clsts.ssch]]
}
else {
bact_flow_frame <- flowClust::split(flow_frame, flowClust.res)[[which.max(flowClust.res@mu[, 1])]]
}
if(flowClust.res@K == 3){
clsts.ssch <- flowClust.res@mu[, 2]
clsts.ssch <- clsts.ssch[clsts.ssch != which.max(clsts.ssch)]
clsts.ssch <- clsts.ssch[clsts.ssch != which.min(clsts.ssch)]
bact_flow_frame <- flowClust::split(flow_frame, flowClust.res)[[clsts.ssch]]
} else {
bact_flow_frame <- flowClust::split(flow_frame, flowClust.res)[[which.max(flowClust.res@mu[, 1])]]
}
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
flow_frame <- read.FCS("R:/Alex/FACS/automated_TA/t02_trimmed/t02_1_AT_1.fcs")
flowClust.res <- flowClust::flowClust(flow_frame,
varNames=c("FSC-H", "SSC-H"),
K=1:3,
criterion="ICL",
level = 0.95);
flowClust.res <- flowClust.res[[flowClust.res@index]]
if(flowClust.res@K == 3){
clsts.ssch <- flowClust.res@mu[, 2]
clsts.ssch <- clsts.ssch[clsts.ssch != which.max(clsts.ssch)]
clsts.ssch <- clsts.ssch[clsts.ssch != which.min(clsts.ssch)]
bact_flow_frame <- flowClust::split(flow_frame, flowClust.res)[[clsts.ssch]]
} else {
bact_flow_frame <- flowClust::split(flow_frame, flowClust.res)[[which.max(flowClust.res@mu[, 1])]]
}
prepped_flow_frame <- prep.flowFrame(flow_frame)
prep.flowFrame <- function(flow_frame) {
# Remove 0 values as these produce -Inf values when log10 is applied
#   trimmed_flow_frame <- flow_frame
#   for (marker in colnames(flow_frame)) {
#     trimmed_flow_frame <- Subset(trimmed_flow_frame, as.logical(exprs(trimmed_flow_frame[, marker]) > 0.0))
#   }
trimmed_flow_frame <- flow_frame
for (marker in c("FSC-H", "SSC-H", "SSC-A")) {
trimmed_flow_frame <- flowCore::Subset(trimmed_flow_frame, as.logical(flowCore::exprs(trimmed_flow_frame[, marker]) > 0.0))
}
# log10 transform the values
log10_flow_frame <- flowCore::transform(trimmed_flow_frame,
flowCore::transformList(from=flowCore::colnames(trimmed_flow_frame), tfun=log10))
return(log10_flow_frame)
}
prepped_flow_frame <- prep.flowFrame(flow_frame)
get.bacteria <- function(flow_frame) {
## calculate clusters for K=1, K=2 and K=3
flowClust.res <- flowClust::flowClust(flow_frame,
varNames=c("FSC-H", "SSC-H"),
K=1:3,
criterion="ICL",
level = 0.95);
## get the results for the K with the best ICL
flowClust.res <- flowClust.res[[flowClust.res@index]]
if(flowClust.res@K == 3){
clsts.ssch <- flowClust.res@mu[, 2]
clsts.ssch <- clsts.ssch[clsts.ssch != which.max(clsts.ssch)]
clsts.ssch <- clsts.ssch[clsts.ssch != which.min(clsts.ssch)]
bact_flow_frame <- flowClust::split(flow_frame, flowClust.res)[[clsts.ssch]]
} else {
bact_flow_frame <- flowClust::split(flow_frame, flowClust.res)[[which.max(flowClust.res@mu[, 1])]]
}
return(bact_flow_frame)
#   ## This adjusts the number of clusters to fit based on if there might be a
#   ## cluster for background debris.
#   ## If the FACS data has been thresholded below 8000 we see background junk
#   ## forming a second cluster.
#   ## n.b. the 8000 figure is likely to be changeable, maybe for each run?
#   ## n.b. in some data we see 2 clusters of bacteria, so 3 clusters. This
#   ##      could cause problems.
#   if (min(flowCore::exprs(flow_frame$`FSC-H`)) <= log10(8000)){
#     K_clusters <- 2
#   }   else {
#     K_clusters <- 1; #####CHANGEME: 2 HARDCODED VALUES #####
#   }
#
#   ## remove outliers based on forward and side scatter
#   ## NOT SURE IF 90% or 95% is better
#   ##  This fits a cluster (or 2 clusters) to the data and removes 95% outliers
#   res95 <- flowClust::flowClust(flow_frame,
#                      varNames = c("FSC-H", "SSC-H"),
#                      K = K_clusters,
#                      level = 0.95) #####CHANGEME: HARDCODED VALUE #####
#
#   bact_flow_frame <- flowClust::split(flow_frame, res95)[[which.max(res95@mu[, 1])]]
#
#   return(bact_flow_frame)
}
bacteria_flow_frame <- get.bacteria(prepped_flow_frame)
get.singlets <- function(flow_frame){
## fit a line to SSC-H and SSC-A
lm_fit <- lm(flow_frame[, "SSC-H"]@exprs ~ flow_frame[, "SSC-A"]@exprs)
## trim points that fall "too far" from the line
##      This is an attempt to remove doublets and other cell clumps.
singlet_flow_frame <- flowCore::Subset(flow_frame, lm_fit$residuals ^ 2 < 0.05) #####CHANGEME: HARDCODED VALUE #####
return(singlet_flow_frame)
}
singlet_flow_frame <- get.singlets(bacteria_flow_frame)
ggplot2::ggplot() +
ggplot2::geom_point(data=as.data.frame(flow_frame[,c("FSC-H", "SSC-H")]@exprs), ggplot2::aes(x=log10(`FSC-H`), y=log10(`SSC-H`),color="all_data"),alpha=0.1) +
ggplot2::geom_point(data=as.data.frame(bacteria_flow_frame[,c("FSC-H", "SSC-H")]@exprs), ggplot2::aes(x=`FSC-H`, y=`SSC-H`,color="bacteria"),alpha=0.1) +
ggplot2::geom_point(data=as.data.frame(singlet_flow_frame[,c("FSC-H", "SSC-H")]@exprs), ggplot2::aes(x=`FSC-H`, y=`SSC-H`,color="single_bacteria"),alpha=0.1) +
ggplot2::xlim(0,7) +
ggplot2::ylim(0,7)
ggplot2::ggplot() +
ggplot2::geom_area(data=as.data.frame(flow_frame[,c("FSC-H")]@exprs), ggplot2::aes(x=log10(`FSC-H`),y=..count..,fill="all_data"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(bacteria_flow_frame[,c("FSC-H")]@exprs), ggplot2::aes(x=`FSC-H`,y=..count..,fill="bacteria"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(singlet_flow_frame[,c("FSC-H")]@exprs), ggplot2::aes(x=`FSC-H`,y=..count..,fill="single_bacteria"),alpha=0.5, stat = "bin") +
ggplot2::xlim(0,7)
ggplot2::ggplot() +
ggplot2::geom_area(data=as.data.frame(flow_frame[,c("SSC-H")]@exprs), ggplot2::aes(x=log10(`SSC-H`),y=..count..,fill="all_data"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(bacteria_flow_frame[,c("SSC-H")]@exprs), ggplot2::aes(x=`SSC-H`,y=..count..,fill="bacteria"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(singlet_flow_frame[,c("SSC-H")]@exprs), ggplot2::aes(x=`SSC-H`,y=..count..,fill="single_bacteria"),alpha=0.5, stat = "bin") +
ggplot2::xlim(0,7)
ggplot2::ggplot() +
ggplot2::geom_area(data=as.data.frame(flow_frame[,c("BL1-H")]@exprs), ggplot2::aes(x=log10(`BL1-H`),y=..count..,fill="all_data"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(bacteria_flow_frame[,c("BL1-H")]@exprs), ggplot2::aes(x=`BL1-H`,y=..count..,fill="bacteria"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(singlet_flow_frame[,c("BL1-H")]@exprs), ggplot2::aes(x=`BL1-H`,y=..count..,fill="single_bacteria"),alpha=0.5, stat = "bin") +
ggplot2::xlim(0,7)
ggplot2::ggplot() +
ggplot2::geom_area(data=as.data.frame(flow_frame[,c("YL1-H")]@exprs), ggplot2::aes(x=log10(`YL1-H`),y=..count..,fill="all_data"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(bacteria_flow_frame[,c("YL1-H")]@exprs), ggplot2::aes(x=`YL1-H`,y=..count..,fill="bacteria"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(singlet_flow_frame[,c("YL1-H")]@exprs), ggplot2::aes(x=`YL1-H`,y=..count..,fill="single_bacteria"),alpha=0.5, stat = "bin") +
ggplot2::xlim(0,7)
ggplot2::ggplot() +
ggplot2::geom_point(data=as.data.frame(flow_frame[,c("SSC-H", "SSC-A")]@exprs), ggplot2::aes(x=log10(`SSC-H`), y=log10(`SSC-A`),color="all_data"),alpha=0.1) +
ggplot2::geom_point(data=as.data.frame(bacteria_flow_frame[,c("SSC-H", "SSC-A")]@exprs), ggplot2::aes(x=`SSC-H`, y=(`SSC-A`),color="bacteria"),alpha=0.1) +
ggplot2::geom_point(data=as.data.frame(singlet_flow_frame[,c("SSC-H", "SSC-A")]@exprs), ggplot2::aes(x=`SSC-H`, y=(`SSC-A`),color="single_bacteria"),alpha=0.1) +
ggplot2::xlim(0,7) +
ggplot2::ylim(0,7)
get_legend <- function(myggplot){
tmp <- ggplot2::ggplot_gtable(ggplot2::ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
plt_main <- ggplot2::ggplot() +
ggplot2::geom_point(data=as.data.frame(flow_frame[,c("FSC-H", "SSC-H")]@exprs), ggplot2::aes(x=log10(`FSC-H`), y=log10(`SSC-H`),color="all_data"),alpha=0.1) +
ggplot2::geom_point(data=as.data.frame(bacteria_flow_frame[,c("FSC-H", "SSC-H")]@exprs), ggplot2::aes(x=`FSC-H`, y=`SSC-H`,color="bacteria"),alpha=0.1) +
ggplot2::geom_point(data=as.data.frame(singlet_flow_frame[,c("FSC-H", "SSC-H")]@exprs), ggplot2::aes(x=`FSC-H`, y=`SSC-H`,color="single_bacteria"),alpha=0.1) +
ggplot2::xlim(0,7) +
ggplot2::ylim(0,7)
plt_fsch <- ggplot2::ggplot() +
ggplot2::geom_area(data=as.data.frame(flow_frame[,c("FSC-H")]@exprs), ggplot2::aes(x=log10(`FSC-H`),y=..count..,fill="all_data"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(bacteria_flow_frame[,c("FSC-H")]@exprs), ggplot2::aes(x=`FSC-H`,y=..count..,fill="bacteria"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(singlet_flow_frame[,c("FSC-H")]@exprs), ggplot2::aes(x=`FSC-H`,y=..count..,fill="single_bacteria"),alpha=0.5, stat = "bin") +
ggplot2::xlim(0,7)
plt_ssch <- ggplot2::ggplot() +
ggplot2::geom_area(data=as.data.frame(flow_frame[,c("SSC-H")]@exprs), ggplot2::aes(x=log10(`SSC-H`),y=..count..,fill="all_data"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(bacteria_flow_frame[,c("SSC-H")]@exprs), ggplot2::aes(x=`SSC-H`,y=..count..,fill="bacteria"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(singlet_flow_frame[,c("SSC-H")]@exprs), ggplot2::aes(x=`SSC-H`,y=..count..,fill="single_bacteria"),alpha=0.5, stat = "bin") +
ggplot2::xlim(0,7)
if (is.element("FL1-H", flowCore::colnames(flow_frame))){
plt_bl1h <- ggplot2::ggplot() +
ggplot2::geom_area(data=as.data.frame(flow_frame[,c("FL1-H")]@exprs), ggplot2::aes(x=log10(`FL1-H`),y=..count..,fill="all_data"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(bacteria_flow_frame[,c("FL1-H")]@exprs), ggplot2::aes(x=`FL1-H`,y=..count..,fill="bacteria"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(singlet_flow_frame[,c("FL1-H")]@exprs), ggplot2::aes(x=`FL1-H`,y=..count..,fill="single_bacteria"),alpha=0.5, stat = "bin") +
ggplot2::xlim(0,7)
} else {
plt_bl1h <- ggplot2::ggplot() +
ggplot2::geom_area(data=as.data.frame(flow_frame[,c("BL1-H")]@exprs), ggplot2::aes(x=log10(`BL1-H`),y=..count..,fill="all_data"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(bacteria_flow_frame[,c("BL1-H")]@exprs), ggplot2::aes(x=`BL1-H`,y=..count..,fill="bacteria"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(singlet_flow_frame[,c("BL1-H")]@exprs), ggplot2::aes(x=`BL1-H`,y=..count..,fill="single_bacteria"),alpha=0.5, stat = "bin") +
ggplot2::xlim(0,7)
plt_yl1h <- ggplot2::ggplot() +
ggplot2::geom_area(data=as.data.frame(flow_frame[,c("YL1-H")]@exprs), ggplot2::aes(x=log10(`YL1-H`),y=..count..,fill="all_data"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(bacteria_flow_frame[,c("YL1-H")]@exprs), ggplot2::aes(x=`YL1-H`,y=..count..,fill="bacteria"),alpha=0.5, stat = "bin") +
ggplot2::geom_area(data=as.data.frame(singlet_flow_frame[,c("YL1-H")]@exprs), ggplot2::aes(x=`YL1-H`,y=..count..,fill="single_bacteria"),alpha=0.5, stat = "bin") +
ggplot2::xlim(0,7)
}
plt_single <- ggplot2::ggplot() +
ggplot2::geom_point(data=as.data.frame(flow_frame[,c("SSC-H", "SSC-A")]@exprs), ggplot2::aes(x=log10(`SSC-H`), y=log10(`SSC-A`),color="all_data"),alpha=0.1) +
ggplot2::geom_point(data=as.data.frame(bacteria_flow_frame[,c("SSC-H", "SSC-A")]@exprs), ggplot2::aes(x=`SSC-H`, y=(`SSC-A`),color="bacteria"),alpha=0.1) +
ggplot2::geom_point(data=as.data.frame(singlet_flow_frame[,c("SSC-H", "SSC-A")]@exprs), ggplot2::aes(x=`SSC-H`, y=(`SSC-A`),color="single_bacteria"),alpha=0.1) +
ggplot2::xlim(0,7) +
ggplot2::ylim(0,7)
legend <- get_legend(plt_main)
plt_main <- plt_main + ggplot2::theme(legend.position = "none")
plt_single <- plt_single + ggplot2::theme(legend.position = "none")
plt_ssch <- plt_ssch + ggplot2::theme(legend.position = "none")
plt_bl1h <- plt_bl1h + ggplot2::theme(legend.position = "none")
plt_yl1h <- plt_yl1h + ggplot2::theme(legend.position = "none")
plt <- gridExtra::arrangeGrob(plt_main, plt_single, legend, plt_ssch,
plt_bl1h, plt_yl1h, ncol = 3, nrow = 2)
title <- grid::textGrob(paste("Trimming of flow data to remove background and doublets:\n ", flowCore::identifier(flow_frame)))
padding <- grid::unit(5, "mm")
plt <- gtable::gtable_add_rows(plt, heights = grid::grobHeight(title) + padding, pos = 0)
plt <- gtable::gtable_add_grob(plt, title, 1, 1, 1, ncol(plt))
ggplot2::ggsave(filename = paste(dirname(out_name),
gsub(".fcs",
"_trimmed.png",
basename(out_name)),
sep = "/"), plot = plt)
print(paste("Plotting trimmed flowFrame ", flowCore::identifier(flow_frame)))
plt
show(plt)
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
which.max(flowClust.res@mu[, 1])
which.max(flowClust.res@mu[, 2])
which.min(flowClust.res@mu[, 2])
flowClust.res@mu
type(which.min(flowClust.res@mu[, 2]))
v <- which.min(flowClust.res@mu[, 2])
which.min(flowClust.res@mu
)
flowClust.res@mu
flowClust.res@mu[,1]
flowClust.res@mu[,2]
flow_frame <- read.FCS("R:/Alex/FACS/automated_TA/t02_trimmed/t02_1_AT_K_2.fcs")
prepped_flow_frame <- prep.flowFrame(flow_frame)
flow_frame <- prepped_flow_frame
flowClust.res <- flowClust::flowClust(flow_frame,
varNames=c("FSC-H", "SSC-H"),
K=1:3,
criterion="ICL",
level = 0.95);
flowClust.res <- flowClust.res[[flowClust.res@index]]
print(paste(flowClust.res@K, "clusters found"))
flowClust.res <- flowClust::flowClust(flow_frame,
varNames=c("FSC-H", "SSC-H"),
K=1:3,
criterion="ICL",
level = 0.95);
flow_frame <- read.FCS("R:/Alex/FACS/automated_TA/t02/t02_1_AT_K_2.fcs")
prepped_flow_frame <- prep.flowFrame(flow_frame)
flow_frame <- prepped_flow_frame
flowClust.res <- flowClust::flowClust(flow_frame,
varNames=c("FSC-H", "SSC-H"),
K=1:3,
criterion="ICL",
level = 0.95);
flowClust.res <- flowClust.res[[flowClust.res@index]]
print(paste(flowClust.res@K, "clusters found"))
flowClust.res@mu[, 2]
clsts.ssch <- flowClust.res@mu[, 2]
clsts.ssch[clsts.ssch != which.max(clsts.ssch)]
which.max(clsts.ssch)
max(clsts.ssch)
clsts.ssch <- clsts.ssch[clsts.ssch != max(clsts.ssch)]
clsts.ssch <- clsts.ssch[clsts.ssch != min(clsts.ssch)]
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
which(4==c(2, 4, 6))
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
box(4, 3.89)
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
library(autoGate)
trim.fcs("R:/Alex/FACS/automated_TA/t02", do_plot = T)
library(autoGate)
library(autoGate)
library(autoGate)
